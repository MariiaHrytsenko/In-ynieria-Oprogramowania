dataUser_path = "C:/Users/Mariia/Desktop/University/sem 5/In-ynieria-Oprogramowania/DB/csvDATA/dataUser.csv"
adressUser_path = "C:/Users/Mariia/Desktop/University/sem 5/In-ynieria-Oprogramowania/DB/csvDATA/adressUser.csv"

code --install-extension ritwickdey.LiveServer

#sqlalchemy
connection_string = (
    "mssql+pyodbc://"
    "mh308876@student.polsl.pl:3QoXFU6tRou9@"
    "mhserverstud.database.windows.net/DB_IOPROJECT"
    "?driver=ODBC+Driver+17+for+SQL+Server"
    "&authentication=ActiveDirectoryPassword"
)

        connection_string = (
            "Driver={ODBC Driver 17 for SQL Server};"
            "Server=mhserverstud.database.windows.net;"
            "Database=DB_IOPROJECT;"
            "UID=mh308876@student.polsl.pl;"
            "PWD=3QoXFU6tRou9;"
            "Authentication=ActiveDirectoryPassword;"
        )


        

adminPage
    CSVdb/ 
        __init__.py
        connectDBP1.ps1
        extractCSVfun.py - декларація функцій для зчитування, обробки та запису даних про користувача до бд
        extractCSVmain.py - скрипт для запуску функцій з попереднього файлу у коректній послідовности

    dataAnalysProcess/
        __init__.py
        connectDBP.ps1
        DAPmain.py - основиний скрипт для запуску обробки даних
        processDataFUN.py - 
        statisticsFUN.py - декларація функцій для агрегування даних про користувачів

    readD/
        __init__.py 
        extractDfun.py 
        extractDmain.py

    resultPreview/
        __init__.py
        adminPage.html 
        adminpy.txt 
        plotCreation.py - декларування створення графіків 
        
__init__.py
adminPageMain.py

Зчитування даних із бази даних
Об'єднання даних
Чищення даних
Коригування даних:

Статистика для віку
Статистика для регіону

Родини у регіоні
1. Визначення дітей (вік менше 18 років):
Можна вирахувати вік користувачів за їхньою датою народження. Якщо вік менший за 18 років, це може бути вказівкою на дитину.
2. Збіги прізвищ:
Якщо користувачі мають однакові прізвища (особливо з однаковим або подібним прізвищем у батьків та дітей), це може бути натяком на те, що вони належать до однієї родини.
3. Перевірка на наявність батьківських контактів:
Якщо у користувача є електронна пошта або телефон, які збігаються з даними інших користувачів, це може свідчити про зв'язок між користувачами (наприклад, батько і дитина можуть мати схожі контактні дані).

Візуалізація
"""


шукаємо людей із однаковим прізвищем
    перевіряємо імена 
        якщо однакові перевіряємо регіон проживання 
            якщо однаковий 
                перевіряємо день народження, пошту і телефон
        якщо різні перевіряємо регіон проживання 
            якщо однаковий 
                перевіряємо чи є співпадіння у номері телефону/пошті/вулиці 
                    якщо співпадіння у вулиці - робимо ПРИПУЩЕННЯ, що вони родина
                    якщо (телефону/пошті) - перевіряємо чи є у когось вік менше 18 
                        якщо так - робимо ПРИПУЩЕННЯ що це родина з дітьми 
            якщо різний - однофамільці

аналіз даних
- секція вступ
1. dfData.info() для бд + для кожної таблиці окремо
          .count() для кожної таблиці окремо
          .insull().sum() 
2. пошук повних дублікатів для кожної таблиці
в order зберегти дані для подальшого аналізу - orderDuplicateData
3. показати обчислення віку (я покажу тобі існуючу функцію перетворення дати + обчислення віку - вона вже існує)
4. показати, що ми використовуємо не всі стовпці для аналізу даних 
    userData
    adressData
    bikeData
    modelBike
    orderUser

-сексія user
5. графіки для userData
    к-сть користувачів по віку (стовпчата горизонтальна діаграма. x - кількість користувачів, y - рік народження)
    відсотковий склад користувачів (колоподібна діаграма)
6. графіки для adressData
    к-сть користувачів по регіону (стовпчата горизонтальна діаграма. x - кількість користувачів, y - регіон)
    відсотковий склад користувачів (pie chart діаграма)
7. підсумок сексії
    Boxplot для віку користувачів за регіонами
    розподіл користувачів за статями у регіонах (стовпчата горизонтальна діаграма. x - кількість користувачів, y - по 3 стовпці на кожен регіон (жінки, чоловіки, діти(користувачі до 18 - спочатку обрахувати їх, потім будувати графік)))

- сексія bike
8. графіки для bikeData 
    кількість (штук) bike для кожної nameModel
9. графіки для modelBike
    кількість typeModel
    у якої вікової категорії, які байки популярні (стовпчата діаграма. х - діапазон віку, у - к-сть замовлених байків кожного типу)
    у якому регіоні, які байки популярні (стовпчата діаграма. х - регіон, у - к-сть замовлених байків кожного типу)
10. підсумок сексії
    розподіл типів байків у кожної моделі (стовпчата горизонтальна діаграма. x - кількість байків, y - по n стовпців на кожен тип)


- сексія прогнозування 
    Прогнозування попиту — на основі історичних даних можна спробувати спрогнозувати попит на певні моделі, типи байків або навіть на конкретні регіони.
    Аналіз аномалій — наприклад, чи є користувачі з аномально великими або маленькими замовленнями, що можна інтерпретувати як потенційно фальшиві замовлення або помилки.
    Визначення родин — алгоритм може допомогти виділити групи користувачів, які можуть бути родинами або користувачами, які часто замовляють разом.




бд
    orderUser/
        IDorder
        IDuser
        IDbike
        dataStart
        dataFinish
        totalTimeOrderStart
        totalTimeOrderFinish
        realTimeOrderStart
        realTimeOrderFinish


    bikeData
        IDbike
        IDmodel
        IDstore
        IDrepService
        aviableBike
        IDreturnLocation

    modelBike
        IDmodel
        nameModel
        typeModel
        PriceModel
        photoModel
        amountBike
        amountAviableBike

    userData
        IDuser
        emailUser
        telnumUser
        passwordUser
        nameUser
        surnameUser
        birthdayUser
        sexUser

    adressData
        IDuser
        regionUser
        cityUser
        postCodeUser
        streetUser
        numApartUser

